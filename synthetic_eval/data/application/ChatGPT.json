{
    "HomePage.js": "import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { getCurrentUser } from \"../utils/fakeUserService\";\nimport itemData from \"../data/itemData.json\";\nimport { motion } from \"framer-motion\";\n\nconst HomePage = () => {\n  const user = getCurrentUser();\n\n  return (\n    <div style={styles.pageWrapper}>\n      {/* Hero Banner */}\n      <div style={styles.hero}>\n        <h1 style={styles.heroTitle}>Welcome {user ? user.username : \"Guest\"}!</h1>\n        <p style={styles.heroSubtitle}>Find your favorite deals and save big!</p>\n        <input\n          type=\"text\"\n          placeholder=\"Search for products...\"\n          style={styles.searchBar}\n        />\n      </div>\n\n      {/* Section Title */}\n      <h2 style={styles.sectionTitle}>Featured Products</h2>\n\n      {/* Product Grid */}\n      <div style={styles.grid}>\n        {itemData.map((item) => (\n          <motion.div\n            key={item.id}\n            style={styles.card}\n            whileHover={{ scale: 1.03 }}\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.3 }}\n          >\n            <img\n              src={`https://picsum.photos/id/${item.id}/400`}\n              alt={item.title}\n              style={styles.image}\n            />\n            <div style={styles.cardBody}>\n              <Link\n                to={`/item/${item.id}`}\n                state={{ title: item.title, price: item.price }}\n                style={styles.titleLink}\n              >\n                {item.title}\n              </Link>\n              <div className=\"product-price\">\n                <div className=\"product-price\">\n                  ${typeof item.price === \"number\" ? item.price.toFixed(2) : \"0.00\"}\n                </div>\n          </div>\n              <button style={styles.addToCartBtn}>Add to Cart</button>\n            </div>\n          </motion.div>\n        ))}\n      </div>\n\n      {/* Footer Link */}\n      <div style={styles.footer}>\n        <Link to=\"/settings\" style={styles.settingsLink}>\n          Manage Account Settings\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nconst styles = {\n  pageWrapper: {\n    fontFamily: \"Segoe UI, sans-serif\",\n    padding: \"2rem\",\n    backgroundColor: \"#f9f9f9\",\n  },\n  hero: {\n    textAlign: \"center\",\n    padding: \"2.5rem 1rem\",\n    backgroundColor: \"#fff\",\n    borderRadius: \"12px\",\n    marginBottom: \"2rem\",\n    boxShadow: \"0 4px 12px rgba(0,0,0,0.05)\",\n  },\n  heroTitle: {\n    fontSize: \"2.5rem\",\n    fontWeight: \"700\",\n    margin: \"0 0 0.5rem\",\n  },\n  heroSubtitle: {\n    fontSize: \"1.2rem\",\n    color: \"#666\",\n    marginBottom: \"1rem\",\n  },\n  searchBar: {\n    padding: \"0.75rem 1rem\",\n    width: \"80%\",\n    maxWidth: \"500px\",\n    fontSize: \"1rem\",\n    borderRadius: \"8px\",\n    border: \"1px solid #ccc\",\n  },\n  sectionTitle: {\n    fontSize: \"1.75rem\",\n    margin: \"1.5rem 0\",\n    fontWeight: \"600\",\n  },\n  grid: {\n    display: \"grid\",\n    gridTemplateColumns: \"repeat(auto-fit, minmax(250px, 1fr))\",\n    gap: \"1.5rem\",\n  },\n  card: {\n    backgroundColor: \"#fff\",\n    borderRadius: \"16px\",\n    overflow: \"hidden\",\n    boxShadow: \"0 4px 12px rgba(0,0,0,0.08)\",\n    transition: \"0.3s\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  image: {\n    width: \"100%\",\n    height: \"220px\",\n    objectFit: \"cover\",\n  },\n  cardBody: {\n    padding: \"1rem\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    gap: \"0.5rem\",\n    flexGrow: 1,\n  },\n  titleLink: {\n    fontSize: \"1.1rem\",\n    fontWeight: \"600\",\n    textDecoration: \"none\",\n    color: \"#333\",\n  },\n  price: {\n    color: \"#27ae60\",\n    fontWeight: \"600\",\n    fontSize: \"1rem\",\n  },\n  addToCartBtn: {\n    marginTop: \"auto\",\n    padding: \"0.5rem\",\n    backgroundColor: \"#007bff\",\n    color: \"#fff\",\n    fontSize: \"0.95rem\",\n    border: \"none\",\n    borderRadius: \"8px\",\n    cursor: \"pointer\",\n    transition: \"background-color 0.3s\",\n  },\n  footer: {\n    marginTop: \"3rem\",\n    textAlign: \"center\",\n  },\n  settingsLink: {\n    textDecoration: \"none\",\n    color: \"#007bff\",\n    fontSize: \"1rem\",\n  },\n};\n\nexport default HomePage;",
    "HomePage.css": "",
    "ItemDeatilPage.js": "import React, { useState, useRef } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport {\n    Box,\n    Typography,\n    Button,\n    IconButton,\n    MobileStepper,\n    useTheme,\n} from \"@mui/material\";\nimport {\n    ArrowBackIosNew as ArrowBackIosNewIcon,\n    ArrowForwardIos as ArrowForwardIosIcon,\n    ZoomIn as ZoomInIcon,\n} from \"@mui/icons-material\";\nimport itemData from \"../data/itemData.json\";\n\nconst ItemDetailPage = () => {\n    const { id } = useParams();\n    const item = itemData.find(i => i.id === parseInt(id));\n    const theme = useTheme();\n    const [activeStep, setActiveStep] = useState(0);\n    const [magnifierOn, setMagnifierOn] = useState(false);\n    const [magnifierPos, setMagnifierPos] = useState({ x: 0, y: 0, bgX: 0, bgY: 0 });\n    const imgRef = useRef(null);\n    const maxSteps = item?.images.length || 0;\n\n    if (!item) {\n        return (\n            <Box p={4}>\n                <Typography variant=\"h6\">Item not found.</Typography>\n                <Link to=\"/home\">\n                    <Button variant=\"outlined\" sx={{ mt: 2 }}>\n                        Back to Home\n                    </Button>\n                </Link>\n            </Box>\n        );\n    }\n\n    const handleNext = () => {\n        setActiveStep(prev => (prev + 1) % maxSteps);\n        setMagnifierOn(false);\n    };\n\n    const handleBack = () => {\n        setActiveStep(prev => (prev - 1 + maxSteps) % maxSteps);\n        setMagnifierOn(false);\n    };\n\n    const toggleMagnifier = () => setMagnifierOn(prev => !prev);\n\n    const handleMouseMove = (e) => {\n        if (!imgRef.current) return;\n\n        const rect = imgRef.current.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n\n        const imgWidth = imgRef.current.offsetWidth;\n        const imgHeight = imgRef.current.offsetHeight;\n\n        const bgX = (x / imgWidth) * (imgWidth * 2);\n        const bgY = (y / imgHeight) * (imgHeight * 2);\n\n        setMagnifierPos({ x, y, bgX, bgY });\n    };\n\n    return (\n        <Box p={{ xs: 2, sm: 4 }} maxWidth=\"800px\" mx=\"auto\">\n            <Typography variant=\"h4\" gutterBottom>\n                {item.title}\n            </Typography>\n\n            <Typography variant=\"h5\" color=\"primary\" gutterBottom>\n                ${item.price.toFixed(2)}\n            </Typography>\n\n            <Box position=\"relative\" mb={2}>\n                <Box\n                    ref={imgRef}\n                    component=\"img\"\n                    src={item.images[activeStep]}\n                    alt={`Detail ${activeStep}`}\n                    onMouseMove={magnifierOn ? handleMouseMove : null}\n                    sx={{\n                        width: \"100%\",\n                        maxHeight: 450,\n                        objectFit: \"contain\",\n                        borderRadius: 2,\n                        transition: \"opacity 0.5s ease-in-out\",\n                        cursor: magnifierOn ? \"none\" : \"default\",\n                    }}\n                />\n\n                {magnifierOn && (\n                    <Box\n                        sx={{\n                            position: \"absolute\",\n                            left: magnifierPos.x - 50,\n                            top: magnifierPos.y - 50,\n             width: 100,\n                            height: 100,\n                            border: \"2px solid #aaa\",\n                            borderRadius: \"8px\",\n                            backgroundImage: `url(${item.images[activeStep]})`,\n                            backgroundRepeat: \"no-repeat\",\n                            backgroundSize: `${imgRef.current?.offsetWidth * 2}px ${imgRef.current?.offsetHeight * 2}px`,\n                            backgroundPosition: `-${magnifierPos.bgX - 50}px -${magnifierPos.bgY - 50}px`,\n                            pointerEvents: \"none\",\n             zIndex: 10,\n                        }}\n                    />\n                )}\n\n                {/* Navigation Arrows */}\n                <IconButton\n                    onClick={handleBack}\n                    sx={{\n                        position: \"absolute\",\n                  top: \"50%\",\n                        left: 0,\n                        transform: \"translateY(-50%)\",\n                        bgcolor: \"rgba(255,255,255,0.6)\",\n                        \"&:hover\": { bgcolor: \"rgba(255,255,255,0.9)\" },\n                    }}\n                >\n              <ArrowBackIosNewIcon />\n                </IconButton>\n                <IconButton\n                    onClick={handleNext}\n                    sx={{\n                        position: \"absolute\",\n                        top: \"50%\",\n                        right: 0,\n                        transform: \"translateY(-50%)\",\n                        bgcolor: \"rgba(255,255,255,0.6)\",\n                        \"&:hover\": { bgcolor: \"rgba(255,255,255,0.9)\" },\n                    }}\n                >\n                    <ArrowForwardIosIcon />\n                </IconButton>\n\n                {/* Magnifier Toggle Button */}\n                <IconButton\n                    onClick={toggleMagnifier}\n                    sx={{\n                        position: \"absolute\",\n                        bottom: 10,\n                        right: 10,\n                        bgcolor: \"rgba(255,255,255,0.6)\",\n                        \"&:hover\": { bgcolor: \"rgba(255,255,255,0.9)\" },\n                        zIndex: 5,\n                    }}\n                >\n                    <ZoomInIcon />\n                </IconButton>\n            </Box>\n\n            <MobileStepper\n                variant=\"dots\"\n                steps={maxSteps}\n                position=\"static\"\n                activeStep={activeStep}\n                sx={{ justifyContent: \"center\", mb: 3 }}\n                nextButton={null}\n                backButton={null}\n            />\n\n            <Typography variant=\"body1\" sx={{ mb: 3 }}>\n                {item.description}\n            </Typography>\n\n            <Link to={`/track/${item.id}`}>\n                <Button variant=\"contained\" sx={{ mr: 2 }}>\n                    Track Price Change\n                </Button>\n            </Link>\n\n            <Link to=\"/home\">\n                <Button variant=\"outlined\">Back to Home</Button>\n            </Link>\n        </Box>\n    );\n};\n\nexport default ItemDetailPage;",
    "ItemDeatilPage.css": "",
    "PriceTrackingPage.js": "import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport PriceTrackingChart from \"./PriceTrackingChart\";\nimport \"./PriceTrackingPage.css\";\n\n// Sample monthly price data for items\nconst mockPriceData = {\n  item1: [\n    { month: \"Jan\", price: 99 },\n    { month: \"Feb\", price: 105 },\n    { month: \"Mar\", price: 102 },\n    { month: \"Apr\", price: 97 },\n    { month: \"May\", price: 103 },\n    { month: \"Jun\", price: 98 },\n    { month: \"Jul\", price: 99 },\n    { month: \"Aug\", price: 105 },\n    { month: \"Sep\", price: 102 },\n    { month: \"Oct\", price: 97 },\n    { month: \"Nov\", price: 103 },\n    { month: \"Dec\", price: 98 }\n  ],\n  item2: [\n    { month: \"Jan\", price: 129 },\n    { month: \"Feb\", price: 125 },\n    { month: \"Mar\", price: 123 },\n    { month: \"Apr\", price: 130 },\n    { month: \"May\", price: 127 },\n    { month: \"Jun\", price: 126 },\n    { month: \"Jul\", price: 99 },\n    { month: \"Aug\", price: 105 },\n    { month: \"Sep\", price: 102 },\n    { month: \"Oct\", price: 97 },\n    { month: \"Nov\", price: 103 },\n    { month: \"Dec\", price: 98 }\n  ],\n  item3: [\n    { month: \"Jan\", price: 129 },\n    { month: \"Feb\", price: 125 },\n    { month: \"Mar\", price: 123 },\n    { month: \"Apr\", price: 130 },\n    { month: \"May\", price: 127 },\n    { month: \"Jun\", price: 126 },\n    { month: \"Jul\", price: 99 },\n    { month: \"Aug\", price: 105 },\n    { month: \"Sep\", price: 102 },\n    { month: \"Oct\", price: 97 },\n    { month: \"Nov\", price: 103 },\n    { month: \"Dec\", price: 98 }\n  ]\n};\n\nconst PriceTrackingPage = () => {\n  const { id } = useParams();\n  const priceData = mockPriceData[`item${id}`] || [];\n\n  return (\n    <main className=\"price-tracking-container\">\n      <header className=\"tracking-header\">\n        <h1>\ud83d\udcc8 Price Tracking for Item {id}</h1>\n        <p>View trends and monthly price changes with visual insight.</p>\n      </header>\n\n      <section className=\"chart-wrapper\">\n        <PriceTrackingChart data={priceData.map(({ month, price }) => ({ date: month, price }))} />\n      </section>\n\n      <section className=\"price-table-section\">\n        <h2 className=\"table-heading\">Monthly Price Overview</h2>\n        <table className=\"price-table\">\n          <thead>\n            <tr>\n              <th>Month</th>\n              <th>Price ($)</th>\n            </tr>\n          </thead>\n          <tbody>\n            {priceData.map((entry, index) => (\n              <tr key={index}>\n                <td>{entry.month}</td>\n                <td>${entry.price}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </section>\n    </main>\n  );\n};\n\nexport default PriceTrackingPage;",
    "PriceTrackingPage.css": ".price-tracking-container {\n    max-width: 1000px;\n    margin: 2rem auto;\n    padding: 2rem;\n    background: #fdfdfd;\n    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);\n    border-radius: 12px;\n    font-family: 'Segoe UI', sans-serif;\n  }\n  \n  .tracking-header {\n    text-align: center;\n    margin-bottom: 2rem;\n  }\n  \n  .tracking-header h1 {\n    font-size: 2rem;\n    color: #222;\n    margin-bottom: 0.5rem;\n  }\n  \n  .tracking-header p {\n    color: #666;\n    font-size: 1rem;\n  }\n  \n  .chart-wrapper {\n    margin-bottom: 3rem;\n  }\n  \n  .price-table-section {\n    background-color: #fff;\n    padding: 1.5rem;\n    border-radius: 8px;\n    animation: fadeInUp 0.6s ease;\n  }\n  \n  .table-heading {\n    font-size: 1.2rem;\n    margin-bottom: 1rem;\n    color: #333;\n    font-weight: 600;\n  }\n  \n  .price-table {\n    width: 100%;\n    border-collapse: collapse;\n    font-size: 0.95rem;\n  }\n  \n  .price-table th,\n  .price-table td {\n    padding: 0.75rem;\n    text-align: left;\n    border-bottom: 1px solid #eee;\n  }\n  \n  .price-table th {\n    background-color: #f7f7f7;\n    color: #333;\n  }\n  \n  .price-table tr:hover {\n    background-color: #f5faff;\n    transition: background 0.2s ease;\n  }\n  \n  @keyframes fadeInUp {\n    from {\n      opacity: 0;\n      transform: translateY(20px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }",
    "PriceTrackingChart.js": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n} from 'recharts';\n\nimport './PriceTrackingChart.css';\n\n/**\n * PriceChart\n * @description Displays price change over time in a responsive line chart.\n * @param {Array} data - Array of objects with { date, price }\n */\nconst PriceChart = ({ data }) => {\n  return (\n    <div className=\"price-chart-wrapper\">\n      <h2 className=\"chart-title\">Price Trend</h2>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart data={data} margin={{ top: 20, right: 30, left: 10, bottom: 10 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"date\" tick={{ fontSize: 12 }} />\n          <YAxis tick={{ fontSize: 12 }} />\n          <Tooltip />\n          <Line\n            type=\"monotone\"\n          dataKey=\"price\"\n            stroke=\"#8884d8\"\n            strokeWidth={2}\n            dot={{ r: 3 }}\n            activeDot={{ r: 6 }}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nPriceChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      date: PropTypes.string.isRequired,\n      price: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default PriceChart;",
    "PriceTrackingChart.css": ".price-chart-wrapper {\n    padding: 1rem;\n    background-color: #fff;\n    border-radius: 8px;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n    margin: 2rem 0;\n    max-width: 100%;\n  }\n  \n  .chart-title {\n    font-size: 1.25rem;\n    font-weight: 600;\n    margin-bottom: 1rem;\n    color: #333;\n  }"
}