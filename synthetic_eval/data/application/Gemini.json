{
    "HomePage.js": "// components/HomePage.js\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { getCurrentUser } from \"../utils/fakeUserService\";\nimport itemData from \"../data/itemData.json\";\nimport \"./HomePage.css\"; // Import the CSS file\n\nconst HomePage = () => {\n  const user = getCurrentUser();\n\n  return (\n    <div className=\"home-page\">\n      <header className=\"home-header\">\n        <h1>Welcome to Our Shop, {user ? user.username : \"Guest\"}!</h1>\n        <p className=\"tagline\">Discover amazing products just for you.</p>\n      </header>\n\n      <section className=\"featured-products\">\n        <h2>Featured Products</h2>\n        <div className=\"products-grid\">\n          {itemData.map((item) => (\n            <div className=\"product-card\" key={item.id}>\n              <div className=\"product-image-container\">\n                <img\n                  src={`https://picsum.photos/id/${item.id}/300/200`}\n                  alt={item.title}\n                  className=\"product-photo\"\n                />\n              </div>\n              <Link\n                to={`/item/${item.id}`}\n                state={{ title: item.title, price: item.price }}\n                className=\"product-title\"\n              >\n                {item.title}\n              </Link>\n              <div className=\"product-details\">\n                <span className=\"product-price\">${item.price.toFixed(2)}</span>\n                <button className=\"add-to-cart-button\">Add to Cart</button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </section>\n\n      <section className=\"call-to-action\">\n        <h2>Ready to explore?</h2>\n        <p>Browse our latest collections and find something special.</p>\n        <Link to=\"/products\" className=\"browse-button\">\n          Browse All Products\n        </Link>\n      </section>\n\n      <footer className=\"home-footer\">\n        <p>&copy; 2025 My E-commerce Shop. All rights reserved.</p>\n        {user && <Link to=\"/settings\">User Settings</Link>}\n      </footer>\n    </div>\n  );\n};\n\nexport default HomePage;"   ,
    "HomePage.css": "/* components/HomePage.css */\n.home-page {\n    font-family: 'Arial', sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n    color: #333;\n    display: flex;\n    flex-direction: column;\n    min-height: 100vh;\n  }\n  \n  .home-header {\n    background-color: #fff;\n    padding: 20px;\n    text-align: center;\n    border-bottom: 1px solid #ddd;\n  }\n  \n  .home-header h1 {\n    color: #333;\n    margin-bottom: 5px;\n  }\n  \n  .home-header .tagline {\n    color: #777;\n    font-style: italic;\n  }\n  \n  .featured-products {\n    padding: 20px;\n  }\n  \n  .featured-products h2 {\n    color: #333;\n    margin-bottom: 15px;\n    text-align: center;\n  }\n  \n  .products-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 20px;\n    padding: 20px;\n  }\n  \n  .product-card {\n    background-color: #fff;\n    border-radius: 8px;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    overflow: hidden;\n    transition: transform 0.3s ease-in-out;\n  }\n  \n  .product-card:hover {\n    transform: scale(1.05);\n  }\n  \n  .product-image-container {\n    position: relative;\n    overflow: hidden;\n  }\n  \n  .product-photo {\n    width: 100%;\n    height: auto;\n    display: block;\n    transition: transform 0.4s ease-in-out;\n  }\n  \n  .product-card:hover .product-photo {\n    transform: scale(1.1);\n  }\n  \n  .product-title {\n    display: block;\n    padding: 10px;\n    text-align: center;\n    color: #333;\n    text-decoration: none;\n    font-weight: bold;\n  }\n  \n  .product-details {\n    padding: 10px;\n    text-align: center;\n  }\n  \n  .product-price {\n    color: #e44d26;\n    font-size: 1.2em;\n    font-weight: bold;\n    margin-bottom: 5px;\n  }\n  \n  .add-to-cart-button {\n    background-color: #007bff;\n    color: white;\n    border: none;\n    padding: 8px 15px;\n    border-radius: 5px;\n    cursor: pointer;\n    font-size: 0.9em;\n    transition: background-color 0.3s ease;\n  }\n  \n  .add-to-cart-button:hover {\n    background-color: #0056b3;\n  }\n  \n  .call-to-action {\n    background-color: #fff;\n    padding: 30px;\n    text-align: center;\n    border-top: 1px solid #ddd;\n    border-bottom: 1px solid #ddd;\n  }\n  \n  .call-to-action h2 {\n    color: #333;\n    margin-bottom: 10px;\n  }\n  \n  .call-to-action p {\n    color: #555;\n    margin-bottom: 20px;\n  }\n  \n  .browse-button {\n    display: inline-block;\n    background-color: #28a745;\n    color: white;\n    padding: 10px 20px;\n    text-decoration: none;\n    border-radius: 5px;\n    font-weight: bold;\n    transition: background-color 0.3s ease;\n  }\n  \n  .browse-button:hover {\n    background-color: #1e7e34;\n  }\n  \n  .home-footer {\n    background-color: #333;\n    color: white;\n    text-align: center;\n    padding: 15px;\n    margin-top: auto;\n  }\n  \n  .home-footer a {\n    color: #fff;\n    text-decoration: none;\n    margin-left: 10px;\n  }\n  \n  .home-footer a:hover {\n    text-decoration: underline;\n  }\n  \n  /* Responsive adjustments */\n  @media (max-width: 768px) {\n    .products-grid {\n      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n      padding: 10px;\n      gap: 10px;\n    }\n  \n    .product-card {\n      border-radius: 5px;\n    }\n  \n    .product-title {\n      font-size: 0.9em;\n      padding: 5px;\n    }\n  \n    .product-price {\n      font-size: 1em;\n    }\n  \n    .add-to-cart-button {\n      font-size: 0.8em;\n      padding: 5px 10px;\n    }\n  \n    .call-to-action {\n      padding: 20px;\n    }\n  \n    .browse-button {\n      padding: 8px 15px;\n      font-size: 0.9em;\n    }\n  }",
    "ItemDeatilPage.js": "import React, { useState, useEffect, useRef } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport itemData from '../data/itemData.json'; // Assuming this path is correct\nimport styles from './ItemDetailPage.module.css'; // Import CSS Modules\nimport { FaSearchPlus, FaChevronLeft, FaChevronRight } from 'react-icons/fa'; // Example icons\n\nconst ItemDetailPage = () => {\n    const { id } = useParams();\n    const item = itemData.find(i => i.id === parseInt(id));\n\n    const [currentImageIndex, setCurrentImageIndex] = useState(0);\n    const [isMagnifierEnabled, setIsMagnifierEnabled] = useState(false);\n    const [magnifierPosition, setMagnifierPosition] = useState({ x: 0, y: 0 });\n    const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 }); // To track mouse for magnifier movement\n\n    const imageRef = useRef(null); // Ref for the main image element\n    const magnifierPreviewRef = useRef(null); // Ref for the magnifier preview element\n\n    useEffect(() => {\n        // Reset image index if item changes (though unlikely on this page without re-mount)\n        setCurrentImageIndex(0);\n        setIsMagnifierEnabled(false); // Reset magnifier state\n    }, [id]);\n\n    if (!item) {\n        return <div className={styles.notFound}>Item not found. <Link to=\"/home\" className={styles.backLink}>Go Home</Link></div>;\n    }\n\n    const { title, price, images, description } = item;\n\n    const handleNextImage = () => {\n        setCurrentImageIndex((prevIndex) => (prevIndex + 1) % images.length);\n    };\n\n    const handlePrevImage = () => {\n        setCurrentImageIndex((prevIndex) => (prevIndex - 1 + images.length) % images.length);\n    };\n\n    const handleDotClick = (index) => {\n        setCurrentImageIndex(index);\n    };\n\n    const toggleMagnifier = (event) => {\n        event.stopPropagation(); // Prevent click from bubbling to image container if necessary\n        setIsMagnifierEnabled(!isMagnifierEnabled);\n    };\n\n    const handleMouseMove = (e) => {\n        if (!isMagnifierEnabled || !imageRef.current || !magnifierPreviewRef.current) return;\n\n        const img = imageRef.current;\n        const preview = magnifierPreviewRef.current;\n        const rect = img.getBoundingClientRect();\n\n        // Calculate cursor position relative to the image\n        let x = e.clientX - rect.left;\n        let y = e.clientY - rect.top;\n\n        // Store raw mouse position for the magnifier square placement\n        setMousePosition({ x: e.clientX, y: e.clientY });\n\n        // Constrain x and y to be within the image bounds\n        x = Math.max(0, Math.min(x, rect.width));\n        y = Math.max(0, Math.min(y, rect.height));\n\n        setMagnifierPosition({ x, y });\n\n        // Calculate background position for the zoomed image\n        // The preview size is assumed to be 150x150px (magnifierSize in CSS)\n        // The zoom level is 2x (magnifierZoom in CSS)\n        const zoomLevel = 2;\n        const previewSize = 150;\n\n        const bgPosX = - (x * zoomLevel - previewSize / 2);\n        const bgPosY = - (y * zoomLevel - previewSize / 2);\n\n        preview.style.backgroundPosition = `${bgPosX}px ${bgPosY}px`;\n        preview.style.backgroundImage = `url(${images[currentImageIndex]})`;\n        preview.style.backgroundSize = `${rect.width * zoomLevel}px ${rect.height * zoomLevel}px`;\n    };\n\n    const handleMouseLeaveImage = () => {\n        // Optionally disable magnifier when mouse leaves image area\n        // setIsMagnifierEnabled(false);\n    };\n\n    return (\n        <div className={styles.pageContainer}>\n            <nav className={styles.breadcrumbs}>\n                <Link to=\"/home\">Home</Link> / <span>{title}</span>\n            </nav>\n\n            <div className={styles.detailLayout}>\n                {/* Image Gallery Section */}\n                <div className={styles.imageGallery}>\n                    <div\n                        className={styles.imageContainer}\n                        onMouseMove={handleMouseMove}\n                        onMouseLeave={handleMouseLeaveImage}\n                        ref={imageRef}\n                    >\n                        <img\n                            src={images[currentImageIndex]}\n                            alt={`${title} - view ${currentImageIndex + 1}`}\n                            className={styles.mainImage}\n                        />\n                        {images.length > 1 && (\n                            <>\n                                <button\n                                    onClick={handlePrevImage}\n                                    className={`${styles.navButton} ${styles.prevButton}`}\n                                    aria-label=\"Previous image\"\n                                >\n                                    <FaChevronLeft />\n                                </button>\n                           <button\n                                    onClick={handleNextImage}\n                                    className={`${styles.navButton} ${styles.nextButton}`}\n                                    aria-label=\"Next image\"\n                                >\n                                    <FaChevronRight />\n                                </button>\n                            </>\n                        )}\n                        <button\n                            onClick={toggleMagnifier}\n                            className={styles.magnifierToggle}\n                            aria-label={isMagnifierEnabled ? \"Disable magnifier\" : \"Enable magnifier\"}\n                        >\n                            <FaSearchPlus />\n                        </button>\n                        {isMagnifierEnabled && (\n                            <div\n                                ref={magnifierPreviewRef}\n                                className={styles.magnifierPreview}\n                                style={{\n                                    // Position the preview box near the cursor\n                                    // Adjust offsets as needed for better UX\n                               left: `${mousePosition.x + 15}px`, // 15px offset from cursor\n                                    top: `${mousePosition.y + 15}px`,\n                                }}\n                            />\n                        )}\n                    </div>\n\n                    {images.length > 1 && (\n                        <div className={styles.dotContainer}>\n                            {images.map((_, index) => (\n                                <span\n                                    key={index}\n                                    className={`${styles.dot} ${index === currentImageIndex ? styles.activeDot : ''}`}\n                                    onClick={() => handleDotClick(index)}\n                                    aria-label={`Go to image ${index + 1}`}\n                                />\n                            ))}\n                        </div>\n                    )}\n               </div>\n\n                {/* Item Info Section */}\n                <div className={styles.itemInfo}>\n                    <h1 className={styles.itemTitle}>{title}</h1>\n                    <p className={styles.itemPrice}>${price.toFixed(2)}</p>\n                    <p className={styles.itemDescription}>{description}</p>\n\n                    <div className={styles.actions}>\n                        <button className={styles.primaryButton}>Add to Cart</button>\n                        <Link to={`/track/${item.id}`} className={styles.secondaryButtonLink}>\n                            <button className={styles.secondaryButton}>Track Price</button>\n                        </Link>\n                    </div>\n                </div>\n            </div>\n\n            <div className={styles.backLinkContainer}>\n                <Link to=\"/home\" className={styles.backLink}>\n                    &larr; Back to All Products\n                </Link>\n            </div>\n        </div>\n    );\n};\n\nexport default ItemDetailPage;",
    "ItemDeatilPage.css": "/* General Page Styles */\n.pageContainer {\n    padding: 20px;\n    max-width: 1200px;\n    margin: 0 auto;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n    Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    color: #333;\n}\n\n.breadcrumbs {\n    margin-bottom: 20px;\n    font-size: 0.9rem;\n    color: #555;\n}\n\n.breadcrumbs a {\n    color: #007bff;\n    text-decoration: none;\n}\n\n.breadcrumbs a:hover {\n    text-decoration: underline;\n}\n\n.breadcrumbs span {\n    margin: 0 5px;\n}\n\n.notFound {\n    text-align: center;\n    padding: 50px;\n    font-size: 1.2rem;\n}\n\n/* Layout for Image and Details */\n.detailLayout {\n    display: flex;\n    flex-direction: column; /* Stack on small screens */\n    gap: 30px;\n}\n\n@media (min-width: 768px) {\n    .detailLayout {\n        flex-direction: row; /* Side-by-side on larger screens */\n    }\n}\n\n/* Image Gallery Styles */\n.imageGallery {\n    flex: 1; /* Takes up available space, good for responsiveness */\n    max-width: 100%; /* Ensure it doesn't overflow on small screens */\n    min-width: 0; /* Fix for flex item overflow */\n}\n\n@media (min-width: 768px) {\n    .imageGallery {\n        flex-basis: 50%; /* Roughly half the width on larger screens */\n        max-width: 50%;\n    }\n}\n\n\n.imageContainer {\n    position: relative;\n    width: 100%;\n    /* Maintain aspect ratio, e.g., 4:3 or 1:1 */\n    /* For 1:1 aspect ratio: */\n    /* padding-top: 100%; */\n    /* For 4:3 aspect ratio: */\n    padding-top: 75%; /* (height / width) * 100 = (3/4) * 100 = 75% */\n    background-color: #f0f0f0; /* Placeholder while image loads or if no image */\n    border-radius: 8px;\n    overflow: hidden; /* Crucial for keeping image and magnifier within bounds */\n    cursor: crosshair; /* Default cursor when magnifier might be active */\n    transition: box-shadow 0.3s ease;\n}\n\n.imageContainer:hover {\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n}\n\n.mainImage {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    object-fit: cover; /* Or 'contain' based on preference */\n    display: block; /* Removes extra space below image */\n    transition: transform 0.3s ease-in-out, opacity 0.3s ease;\n}\n\n/* Image Navigation Buttons */\n.navButton {\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    background-color: rgba(0, 0, 0, 0.4);\n    color: white;\n    border: none;\n    padding: 10px;\n    cursor: pointer;\n    border-radius: 50%;\n    font-size: 1.2rem; /* Adjust icon size if using font icons */\n    z-index: 10;\n    transition: background-color 0.2s ease, opacity 0.3s ease;\n    opacity: 0.7;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.navButton:hover {\n    background-color: rgba(0, 0, 0, 0.7);\n    opacity: 1;\n}\n\n.navButton:focus {\n    outline: 2px solid var(--primary-color, #007bff); /* Use theme color if available */\n    outline-offset: 2px;\n}\n\n.prevButton {\n    left: 10px;\n}\n\n.nextButton {\n    right: 10px;\n}\n\n/* Magnifier Toggle Button */\n.magnifierToggle {\n    position: absolute;\n    bottom: 10px;\n    right: 10px;\n    background-color: rgba(255, 255, 255, 0.8);\n    color: #333;\n    border: 1px solid #ccc;\n    padding: 8px;\n    cursor: pointer;\n    border-radius: 50%;\n    font-size: 1rem; /* Adjust icon size */\n    z-index: 10;\n    transition: background-color 0.2s ease, box-shadow 0.2s ease;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.magnifierToggle:hover {\n    background-color: white;\n    box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n}\n\n.magnifierToggle:focus {\n    outline: 2px solid var(--primary-color, #007bff);\n    outline-offset: 1px;\n}\n\n\n/* Magnifier Preview Pane */\n.magnifierPreview {\n    position: fixed; /* Fixed position relative to viewport, moves with cursor */\n    width: 150px; /* Size of the magnifier square */\n    height: 150px;\n    border: 2px solid #fff; /* White border for contrast */\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\n    border-radius: 4px; /* Slightly rounded corners for the magnifier */\n    background-repeat: no-repeat;\n    pointer-events: none; /* Allows clicks to pass through to elements underneath if needed */\n    z-index: 100; /* Ensure it's on top */\n    opacity: 0; /* Initially hidden */\n    transition: opacity 0.2s ease-in-out; /* Smooth appearance */\n    /* The background image and position will be set by JavaScript */\n}\n\n/* Show magnifier preview when active */\n.imageContainer .magnifierPreview {\n    opacity: 1;\n}\n\n\n/* Dot Indicators */\n.dotContainer {\n    text-align: center;\n    padding-top: 15px;\n}\n\n.dot {\n    display: inline-block;\n    width: 10px;\n    height: 10px;\n    margin: 0 5px;\n    background-color: #ccc;\n    border-radius: 50%;\n    cursor: pointer;\n    transition: background-color 0.3s ease, transform 0.2s ease;\n}\n\n.dot:hover {\n    background-color: #aaa;\n    transform: scale(1.2);\n}\n\n.activeDot {\n    background-color: var(--primary-color, #007bff); /* Use theme color */\n    transform: scale(1.1);\n}\n\n/* Item Info Section */\n.itemInfo {\n    flex: 1;\n    padding-left: 0; /* No padding on small screens where it's stacked */\n}\n\n@media (min-width: 768px) {\n    .itemInfo {\n        flex-basis: 50%;\n        padding-left: 20px; /* Add padding when side-by-side */\n    }\n}\n\n.itemTitle {\n    font-size: 2rem;\n    margin-top: 0;\n    margin-bottom: 10px;\n    color: #222;\n    font-weight: 600;\n    line-height: 1.2;\n}\n\n.itemPrice {\n    font-size: 1.8rem;\n    font-weight: bold;\n    color: var(--price-color, #28a745); /* Use theme color */\n    margin-bottom: 20px;\n}\n\n.itemDescription {\n    font-size: 1rem;\n    line-height: 1.6;\n    color: #555;\n    margin-bottom: 25px;\n}\n\n/* Action Buttons */\n.actions {\n    display: flex;\n    gap: 15px; /* Space between buttons */\n    flex-wrap: wrap; /* Allow buttons to wrap on smaller screens */\n}\n\n.primaryButton,\n.secondaryButton {\n    padding: 12px 25px;\n    border: none;\n    border-radius: 5px;\n    font-size: 1rem;\n    font-weight: 500;\n    cursor: pointer;\n    transition: background-color 0.2s ease, transform 0.1s ease, box-shadow 0.2s ease;\n    text-decoration: none; /* For Link components styled as buttons */\n    display: inline-block; /* For Link components */\n    text-align: center;\n}\n\n.primaryButton {\n    background-color: var(--primary-color, #007bff);\n    color: white;\n}\n\n.primaryButton:hover {\n    background-color: var(--primary-hover-color, #0056b3);\n    box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n    transform: translateY(-1px);\n}\n\n.secondaryButton {\n    background-color: #6c757d;\n    color: white;\n}\n\n.secondaryButton:hover {\n    background-color: #545b62;\n    box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n    transform: translateY(-1px);\n}\n\n/* If using a Link as a button wrapper, ensure it fills */\n.secondaryButtonLink {\n    text-decoration: none;\n}\n\n\n/* Back Link */\n.backLinkContainer {\n    margin-top: 30px;\n    text-align: center; /* Center on small screens */\n}\n\n@media (min-width: 768px) {\n    .backLinkContainer {\n        text-align: left; /* Align left on larger screens */\n    }\n}\n\n.backLink {\n    color: var(--primary-color, #007bff);\n    text-decoration: none;\n    font-weight: 500;\n    transition: color 0.2s ease;\n}\n\n.backLink:hover {\n    color: var(--primary-hover-color, #0056b3);\n    text-decoration: underline;\n}\n\n/* Animations & Transitions (examples - already integrated above) */\n/* Smooth image change for carousel - applied to .mainImage */\n/* .mainImage-enter { opacity: 0; transform: translateX(20px); } */\n/* .mainImage-enter-active { opacity: 1; transform: translateX(0); transition: opacity 300ms, transform 300ms; } */\n/* .mainImage-exit { opacity: 1; transform: translateX(0); } */\n/* .mainImage-exit-active { opacity: 0; transform: translateX(-20px); transition: opacity 300ms, transform 300ms; } */",
    "PriceTrackingPage.js": "// src/components/PriceTrackingPage.js\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\nconst pageContainerStyle = {\n  padding: '20px',\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  gap: '20px',\n};\n\nconst titleStyle = {\n  color: '#333',\n  fontSize: '1.8em',\n  marginBottom: '15px',\n};\n\nconst chartContainerStyle = {\n  width: '90%',\n  maxWidth: '800px',\n  height: '400px',\n  boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\n  borderRadius: '8px',\n  overflow: 'hidden',\n  backgroundColor: '#fff',\n};\n\nconst noDataMessageStyle = {\n  color: '#777',\n  fontStyle: 'italic',\n};\n\nconst mockPriceData = {\n  item1: [\n    { month: \"Jan\", price: 99 },\n    { month: \"Feb\", price: 105 },\n    { month: \"Mar\", price: 102 },\n    { month: \"Apr\", price: 97 },\n    { month: \"May\", price: 103 },\n    { month: \"Jun\", price: 98 },\n    { month: \"Jul\", price: 99 },\n    { month: \"Aug\", price: 105 },\n    { month: \"Sep\", price: 102 },\n    { month: \"Oct\", price: 97 },\n    { month: \"Nov\", price: 103 },\n    { month: \"Dec\", price: 98 }\n  ],\n  item2: [\n    { month: \"Jan\", price: 129 },\n    { month: \"Feb\", price: 125 },\n    { month: \"Mar\", price: 123 },\n    { month: \"Apr\", price: 130 },\n    { month: \"May\", price: 127 },\n    { month: \"Jun\", price: 126 },\n    { month: \"Jul\", price: 132 },\n    { month: \"Aug\", price: 135 },\n    { month: \"Sep\", price: 131 },\n    { month: \"Oct\", price: 128 },\n    { month: \"Nov\", price: 133 },\n    { month: \"Dec\", price: 130 }\n  ],\n  item3: [\n    { month: \"Jan\", price: 55 },\n    { month: \"Feb\", price: 58 },\n    { month: \"Mar\", price: 60 },\n    { month: \"Apr\", price: 57 },\n    { month: \"May\", price: 62 },\n    { month: \"Jun\", price: 65 },\n    { month: \"Jul\", price: 63 },\n    { month: \"Aug\", price: 60 },\n    { month: \"Sep\", price: 59 },\n    { month: \"Oct\", price: 61 },\n    { month: \"Nov\", price: 64 },\n    { month: \"Dec\", price: 62 }\n  ]\n};\n\nconst PriceTrackingPage = () => {\n  const { id } = useParams();\n  const priceData = mockPriceData[`item${id}`] || [];\n\n  return (\n    <div style={pageContainerStyle}>\n      <h2 style={titleStyle}>Price History for Item {id}</h2>\n      {priceData.length > 0 ? (\n        <div style={chartContainerStyle}>\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart data={priceData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"month\" />\n              <YAxis domain={['dataMin - 5', 'dataMax + 5']} tickFormatter={(value) => `$${value}`} />\n               <Tooltip formatter={(value) => `$${value}`} labelFormatter={(value) => `Month: ${value}`} />\n              <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" strokeWidth={2} dot={false} activeDot={{ r: 8 }} />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      ) : (\n        <p style={noDataMessageStyle}>No price tracking data available for this item.</p>\n      )}\n    </div>\n  );\n};\n\nexport default PriceTrackingPage;",
    "PriceTrackingPage.css": "",
    "PriceTrackingChart.js": "import React from 'react';\nimport {\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from 'recharts';\nimport PropTypes from 'prop-types';\n\n/**\n * Reusable price tracking line chart.\n */\nconst PriceTrackingChart = ({ data }) => {\n  if (!data?.length) return <p style={{ textAlign: 'center' }}>No price data available.</p>;\n\n  return (\n    <div style={{ width: '100%', height: 300 }}>\n      <ResponsiveContainer>\n        <LineChart data={data} margin={{ top: 20, right: 30, left: 10, bottom: 5 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"month\" />\n          <YAxis />\n          <Tooltip />\n          <Line\n            type=\"monotone\"\n            dataKey=\"price\"\n            stroke=\"#8884d8\"\n            strokeWidth={2}\n            activeDot={{ r: 6 }}\n            dot={{ r: 4 }}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nPriceTrackingChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      month: PropTypes.string.isRequired,\n      price: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default PriceTrackingChart;",
    "PriceTrackingChart.css": ""
}